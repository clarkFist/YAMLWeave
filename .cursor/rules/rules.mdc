---
description: 
globs: 
alwaysApply: true
---
该仓库实现了用于 C 语言自动插桩的工具 **YAMLWeave**。项目既能从代码注释直接插桩（传统模式），也能在源文件中留下锚点，通过 YAML 配置插入桩代码（分离模式）。代码主要位于 `code/` 目录，提供 GUI 界面，同时包含 PyInstaller 打包脚本。

## 项目结构

### 核心代码目录 (`code/`)

- **`code/core/`** - 核心处理模块
  - `stub_processor.py`：桩处理核心，负责遍历目录、备份文件、插入代码
  - `stub_parser.py`：解析 C 文件注释及锚点
  - `utils.py`：文件读写与编码处理等辅助函数

- **`code/handlers/`** - 处理器模块
  - `yaml_handler.py`：加载并管理 YAML 配置，提供桩代码查询
  - `comment_handler.py`：在文件中查找插入点并写入桩代码

- **`code/utils/`** - 工具模块
  - `logger.py`：日志设置和 UI 日志适配
  - `file_utils.py`：文件操作相关工具函数
  - `config.py`：配置管理工具
  - `exceptions.py`：自定义异常类

- **`code/ui/`** - 用户界面模块
  - `app_ui.py`：Tkinter 图形界面
  - `app_controller.py`：连接 UI 与核心处理逻辑的控制器
  - `rounded_progressbar.py`：自定义圆角进度条组件

- **关键入口文件**
  - `code/main.py`：程序主入口，可启动 GUI 或生成示例

### 脚本目录 (`scripts/`)

- `build_exe.py`：PyInstaller 打包脚本
- `generate_flowchart_image.py`：生成流程图脚本
- `safe_pull.py`、`safe_push.py`：安全的 Git 操作脚本
- `tkinter_env_hook.py`：Tkinter 环境配置脚本
- `build_exe/`：打包相关的配置目录

### 文档目录 (`docs/`)

- `architecture/`：架构设计文档
  - `YamlWeave项目架构设计文档.md`：项目架构设计详细说明
  - `YAMLWeave插桩逻辑流程图.png`：插桩逻辑流程图
- `copyright/`：版权相关文档
  - 软件登记相关表格和模板
- `patent/`：专利相关文档
  - 专利申请文档和说明

### 根目录文件

- `readme.md`：项目说明文档
- `requirements.txt`：Python 依赖包列表
- `__init__.py`：包初始化文件

---

## 主要功能

1. **传统模式**
   - 在源代码内写入：
     ```c
     // TC001 STEP1: 描述
     // code: 桩代码内容
     ```
   - 解析注释中的 `code` 字段后直接插入

2. **分离模式**
   - 源文件只含锚点：`// TC001 STEP1 segment1`
   - 桩代码在 YAML 文件中以块格式或列表形式存放
   - `yaml_handler` 根据 (测试用例ID、步骤ID、代码段ID) 返回代码内容

3. **多文件及备份**
   - 扫描选定目录下的 `.c`/`.h` 文件
   - 自动生成备份目录 `*_backup_YYYYMMDD_HHMMSS` 与结果目录 `*_stubbed_YYYYMMDD_HHMMSS`
   - 保持原始目录结构，仅修改含锚点的文件

4. **日志与统计**
   - 所有运行日志写入 `logs_时间戳/yamlweave.log`
   - 处理完毕输出文件数量、成功插入桩点数、失败详情等统计信息

5. **图形用户界面**
   - 基于 Tkinter 的现代化界面
   - 支持目录浏览、YAML 文件选择
   - 实时显示处理进度和日志信息
   - 提供"扫描并插入"一键操作

## 开发约定

### 代码规范
- 使用 **Python 3.7+**，遵循 **PEP 8** 代码风格
- 源文件采用 **UTF-8** 编码
- 主要类和函数须包含详细的 docstring
- 注释中可使用中英文混合，但保持与现有风格一致

### 模块化设计
- **核心逻辑**：放在 `code/core/` 目录
- **处理器**：文件或注释处理相关的放在 `code/handlers/`
- **工具函数**：通用工具函数放在 `code/utils/`
- **用户界面**：GUI 相关代码位于 `code/ui/`
- **脚本工具**：构建和辅助脚本位于 `scripts/`

### 日志和异常处理
- 日志统一通过 `code/utils/logger.py` 配置
- 如需在 UI 中显示日志，使用 `UILogger` 类
- 自定义异常定义在 `code/utils/exceptions.py`

### 兼容性要求
- 修改或新增代码时注意兼容两种模式（传统与分离）
- 保持备份与结果目录逻辑不变
- 确保 GUI 界面的用户体验一致性

### 打包和分发
- 打包流程通过 `scripts/build_exe.py` 调用 PyInstaller
- 如需扩展打包配置，请更新相关 spec 文件
- 保持可执行文件路径和依赖项正确

### 文档维护
- 架构变更时更新 `docs/architecture/` 中的设计文档
- 新功能开发时同步更新 `readme.md`
- 保持 cursor rules 与实际项目结构同步

 

